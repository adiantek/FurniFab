#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

/* automatically generated by rust-bindgen 0.69.4 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const Py_single_input: i32 = 256;
pub const Py_file_input: i32 = 257;
pub const Py_eval_input: i32 = 258;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStatus {
    pub _type: PyStatus__bindgen_ty_1,
    pub func: *const ::std::os::raw::c_char,
    pub err_msg: *const ::std::os::raw::c_char,
    pub exitcode: ::std::os::raw::c_int,
}
pub const PyStatus__PyStatus_TYPE_OK: PyStatus__bindgen_ty_1 = 0;
pub const PyStatus__PyStatus_TYPE_ERROR: PyStatus__bindgen_ty_1 = 1;
pub const PyStatus__PyStatus_TYPE_EXIT: PyStatus__bindgen_ty_1 = 2;
pub type PyStatus__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_PyStatus() {
    const UNINIT: ::std::mem::MaybeUninit<PyStatus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PyStatus>(),
        32usize,
        concat!("Size of: ", stringify!(PyStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStatus>(),
        8usize,
        concat!("Alignment of ", stringify!(PyStatus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStatus),
            "::",
            stringify!(_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStatus),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err_msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStatus),
            "::",
            stringify!(err_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exitcode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStatus),
            "::",
            stringify!(exitcode)
        )
    );
}
extern "C" {
    pub fn python3api_init(
        python_modules: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> PyStatus;
}
extern "C" {
    pub fn python3api_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn python3api_clear(module_name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn python3api_eval(
        module_name: *const ::std::os::raw::c_char,
        code: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn python3api_free(ptr: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn python3api_ensure_gil() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn python3api_release_gil(state: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn python3api_save_thread() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn python3api_restore_thread(state: *mut ::std::os::raw::c_void);
}
